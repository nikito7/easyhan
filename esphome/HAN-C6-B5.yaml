# EB3
# ESP32-C6 / Easy HAN B5
# Tested on: 2024.10.0
# Active development yaml

substitutions:
  dev: EB3
  name: eb3test

interval:
  - interval: 12s
    then:
      - lambda: |-
          if (id(edpbox_polling).state) {
              id(esp_clock).update();
              id(edpbox).update();
          }

esphome:
  name: ${name}
  on_boot:
    priority: -500
    then:
      - switch.turn_on: led_pin
      - delay: 5s
      - switch.turn_on: edpbox_polling
  project:
    name: easyhan.edpbox3-c6-b5
    version: "1.15"

dashboard_import:
  package_import_url: github://nikito7/easyhan/esphome/HAN-C6-B5.yaml@dev
  import_full_config: true

#esp8266:
#  board: esp07s

esp32:
  board: esp32-c6-devkitc-1
  flash_size: 8MB
  variant: esp32c6
  framework:
    type: esp-idf
    version: 5.3.1
    source: https://github.com/tasmota/esp-idf/releases/download/v5.3.1.240921/esp-idf-v5.3.1.zip
    platform_version: 6.8.1
    sdkconfig_options:
      CONFIG_ESPTOOLPY_FLASHSIZE_8MB: y

#esp32:
#  board: adafruit_feather_esp32s3 # N4 R2
#  #board: esp32-s3-devkitc-1 # N8
#  #board: esp32-c6-devkitc-1
#  framework:
#    type: arduino
#  #flash_size: 8MB
#  variant: esp32s3


wifi:
  output_power: 15db
  #use_address: 10.1.0.46

  ssid: !secret wifi_ssid
  password: !secret wifi_password
  #password: edpbox123

  ap:
    ssid: "Easy-HAN-${dev}"
    password: edpbox123
    ap_timeout: 15s # change me

captive_portal:

###

# ainda n√£o funciona no C6
#esp32_ble_tracker:
#bluetooth_proxy:

###

web_server:
  local: true
  version: 3
  
logger:
  #level: debug
  level: verbose # modbus

api:
  reboot_timeout: 30min

ota:
  - platform: esphome

time:
  - platform: homeassistant
    id: esptime

button:
  - platform: restart
    name: "${dev} ESP Restart"

###

switch:

  - platform: gpio
    id: led_pin
    pin:
      number: 2
      inverted: no # C6 no

  - platform: template
    name: "${dev} ESP Polling"
    id: "edpbox_polling"
    optimistic: yes

###

uart:

#ifdef ESP32S3
#define HAN_DIR 16
#define HAN_TX 15
#define HAN_RX 17

#elif ESP32C6
#define HAN_DIR 3
#define HAN_TX 5
#define HAN_RX 4

  id: modbus_serial
  rx_pin: 4
  tx_pin: 5
  baud_rate: 9600
  stop_bits: 1
  #stop_bits: 2 # ziv

modbus:
  flow_control_pin: 3
  id: modbus1
  uart_id: modbus_serial
  send_wait_time: 1500ms

i2c:
  sda: 6
  scl: 7
  scan: false # prevent bootloop

modbus_controller:
  - id: edpbox
    update_interval: never
    address: 0x1
    command_throttle: 900ms
    setup_priority: -10
    offline_skip_updates: 8
    max_cmd_retries: 0

###

sensor:

  - platform: aht10
    variant: AHT20
    temperature:
      name: "${dev} AHT Temperature"
      accuracy_decimals: 1
    humidity:
      name: "${dev} AHT Humidity"
      accuracy_decimals: 1

#  - platform: template
#    name: "${dev} Adc In"
#    id: adc_in_v
#    accuracy_decimals: 2
#    device_class: voltage
#    unit_of_measurement: "V"
#    state_class: measurement

#  - platform: adc
#    name: "${dev} Adc In raw" # ESP32-S3 PCB
#    raw: true
#    pin: 1
#    attenuation: 0dB
#    samples: 20
#    accuracy_decimals: 0
#    device_class: ""
#    unit_of_measurement: "raw"
#    state_class: measurement
#    update_interval: 10s
#    on_value:
#      then:
#        - lambda: id(adc_in_v).state / 257.2580645161;

###

  - platform: template
    name: "${dev} ESP Free Heap"
    lambda: |-
      // arduino
      //float heap = ESP.getFreeHeap();
      // idf
      float heap = esp_get_free_heap_size();
      return heap / 1024.0;
    unit_of_measurement: "kB"
    icon: mdi:chip
    state_class: measurement
    entity_category: diagnostic

  - platform: wifi_signal
    name: "${dev} ESP Signal"
    unit_of_measurement: "dB"
    state_class: measurement
    entity_category: diagnostic

  - platform: uptime
    name: "${dev} ESP Uptime"
    filters:
      - lambda: return x/3600;
    unit_of_measurement: "h"
    accuracy_decimals: 1
    device_class: ""
    entity_category: diagnostic

### ### ###

### Voltage & Current ###

  - platform: modbus_controller
    name: "${dev} Voltage L1"
    address: 0x006C
    unit_of_measurement: "V"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
    device_class: voltage
    state_class: measurement
    on_value:
      - then:
        - switch.turn_on: led_pin
        - delay: 30ms
        - switch.turn_off: led_pin

  - platform: modbus_controller
    name: "${dev} Current L1"
    address: 0x006D
    unit_of_measurement: "A"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
    device_class: current
    state_class: measurement

  - platform: modbus_controller
    name: "${dev} Voltage L2"
    address: 0x006E
    unit_of_measurement: "V"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
    device_class: voltage
    state_class: measurement

  - platform: modbus_controller
    name: "${dev} Current L2"
    address: 0x006F
    unit_of_measurement: "A"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
    device_class: current
    state_class: measurement

  - platform: modbus_controller
    name: "${dev} Voltage L3"
    address: 0x0070
    unit_of_measurement: "V"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
     - multiply: 0.1
    device_class: voltage
    state_class: measurement

  - platform: modbus_controller
    name: "${dev} Current L3"
    address: 0x0071
    unit_of_measurement: "A"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
     - multiply: 0.1
    device_class: current
    state_class: measurement

  - platform: modbus_controller
    name: "${dev} Current"
    address: 0x0072
    unit_of_measurement: "A"
    register_type: read
    value_type: U_WORD
    filters:
      - multiply: 0.1
    accuracy_decimals: 1
    device_class: current
    state_class: measurement

### Active Power & Export ###

  - platform: modbus_controller
    name: "${dev} Active Power L1"
    address: 0x0073
    register_type: read
    value_type: U_DWORD
    register_count: 1
    response_size: 4
    accuracy_decimals: 0
    device_class: power
    unit_of_measurement: "W"
    state_class: measurement

  - platform: modbus_controller
    name: "${dev} Active Power L1 Export"
    address: 0x0074
    register_type: read
    value_type: U_DWORD
    register_count: 1
    response_size: 4
    accuracy_decimals: 0
    device_class: power
    unit_of_measurement: "W"
    state_class: measurement

  - platform: modbus_controller
    name: "${dev} Active Power L2"
    address: 0x0075
    register_type: read
    value_type: U_DWORD
    register_count: 1
    response_size: 4
    accuracy_decimals: 0
    device_class: power
    unit_of_measurement: "W"
    state_class: measurement

  - platform: modbus_controller
    name: "${dev} Active Power L2 Export"
    address: 0x0076
    register_type: read
    value_type: U_DWORD
    register_count: 1
    response_size: 4
    accuracy_decimals: 0
    device_class: power
    unit_of_measurement: "W"
    state_class: measurement

  - platform: modbus_controller
    name: "${dev} Active Power L3"
    address: 0x0077
    register_type: read
    value_type: U_DWORD
    register_count: 1
    response_size: 4
    accuracy_decimals: 0
    device_class: power
    unit_of_measurement: "W"
    state_class: measurement

  - platform: modbus_controller
    name: "${dev} Active Power L3 Export"
    address: 0x0078
    register_type: read
    value_type: U_DWORD
    register_count: 1
    response_size: 4
    accuracy_decimals: 0
    device_class: power
    unit_of_measurement: "W"
    state_class: measurement

  - platform: modbus_controller
    name: "${dev} Active Power Import"
    address: 0x0079
    register_type: read
    value_type: U_DWORD
    register_count: 1
    response_size: 4
    accuracy_decimals: 0
    device_class: power
    unit_of_measurement: "W"
    state_class: measurement

  - platform: modbus_controller
    name: "${dev} Active Power Export"
    address: 0x007A
    register_type: read
    value_type: U_DWORD
    register_count: 1
    response_size: 4
    accuracy_decimals: 0
    device_class: power
    unit_of_measurement: "W"
    state_class: measurement
    on_value:
      - then:
        - switch.turn_on: led_pin
        - delay: 30ms
        - switch.turn_off: led_pin

### Power Factor & Frequency ###

  - platform: modbus_controller
    name: "${dev} Power Factor"
    address: 0x007B
    unit_of_measurement: ""
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 3
    filters:
      - multiply: 0.001
    device_class: power_factor
    state_class: measurement

  - platform: modbus_controller
    name: "${dev} Power Factor L1"
    address: 0x007C
    unit_of_measurement: ""
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 3
    filters:
      - multiply: 0.001
    device_class: power_factor
    state_class: measurement

  - platform: modbus_controller
    name: "${dev} Power Factor L2"
    address: 0x007D
    unit_of_measurement: ""
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 3
    filters:
      - multiply: 0.001
    device_class: power_factor
    state_class: measurement

  - platform: modbus_controller
    name: "${dev} Power Factor L3"
    address: 0x007E
    unit_of_measurement: ""
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 3
    filters:
      - multiply: 0.001
    device_class: power_factor
    state_class: measurement

  - platform: modbus_controller
    name: "${dev} Frequency"
    address: 0x007F
    unit_of_measurement: "Hz"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
    icon: "mdi:pulse"
    state_class: measurement

### Total Energy Tariffs ###

  - platform: modbus_controller
    name: "${dev} T1 Vazio"
    address: 0x0026
    register_type: read
    value_type: U_DWORD
    register_count: 1
    response_size: 4
    accuracy_decimals: 3
    filters:
      - multiply: 0.001
    unit_of_measurement: "kWh"
    state_class: total_increasing
    device_class: energy

  - platform: modbus_controller 
    name: "${dev} T2 Ponta"
    address: 0x0027
    register_type: read
    value_type: U_DWORD
    register_count: 1
    response_size: 4
    accuracy_decimals: 3
    filters:
      - multiply: 0.001
    unit_of_measurement: "kWh"
    state_class: total_increasing
    device_class: energy

  - platform: modbus_controller
    name: "${dev} T3 Cheias"
    address: 0x0028
    register_type: read
    value_type: U_DWORD
    register_count: 1
    response_size: 4
    accuracy_decimals: 3
    filters:
      - multiply: 0.001
    unit_of_measurement: "kWh"
    state_class: total_increasing
    device_class: energy

### Total Energy ###

  - platform: modbus_controller
    name: "${dev} Import"
    skip_updates: 4
    address: 0x0016
    register_type: read
    value_type: U_DWORD
    register_count: 1
    response_size: 4
    accuracy_decimals: 3
    filters:
      - multiply: 0.001
    unit_of_measurement: "kWh"
    state_class: total_increasing
    device_class: energy

  - platform: modbus_controller
    name: "${dev} Export"
    address: 0x0017
    register_type: read
    value_type: U_DWORD
    register_count: 1
    response_size: 4
    accuracy_decimals: 3
    filters:
      - multiply: 0.001
    unit_of_measurement: "kWh"
    state_class: total_increasing
    device_class: energy

### Total Energy L ###

  - platform: modbus_controller
    name: "${dev} Import L1"
    address: 0x001C
    skip_updates: 4
    register_type: read
    value_type: U_DWORD
    register_count: 1
    response_size: 4
    accuracy_decimals: 3
    filters:
      - multiply: 0.001
    unit_of_measurement: "kWh"
    state_class: total_increasing
    device_class: energy

  - platform: modbus_controller
    name: "${dev} Import L2"
    address: 0x001D
    register_type: read
    value_type: U_DWORD
    register_count: 1
    response_size: 4
    accuracy_decimals: 3
    filters:
      - multiply: 0.001
    unit_of_measurement: "kWh"
    state_class: total_increasing
    device_class: energy

  - platform: modbus_controller
    name: "${dev} Import L3"
    address: 0x001E
    register_type: read
    value_type: U_DWORD
    register_count: 1
    response_size: 4
    accuracy_decimals: 3
    filters:
      - multiply: 0.001
    unit_of_measurement: "kWh"
    state_class: total_increasing
    device_class: energy

### Contract ###

  - platform: modbus_controller
    name: "${dev} Contract T1"
    address: 0x000C
    register_type: read
    value_type: U_DWORD
    register_count: 3 # ranges optimization
    response_size: 12 # 
    accuracy_decimals: 2
    filters:
      - multiply: 0.001
    unit_of_measurement: "kVA"
    state_class: measurement
    icon: mdi:flash

  - platform: modbus_controller
    name: "${dev} Contract T4"
    address: 0x000F
    register_type: read
    value_type: U_DWORD
    register_count: 1
    response_size: 4
    accuracy_decimals: 2
    filters:
      - multiply: 0.001
    unit_of_measurement: "kVA"
    state_class: measurement
    icon: mdi:flash
    on_value:
      - then:
        - switch.turn_on: led_pin
        - delay: 30ms
        - switch.turn_off: led_pin

### Load Profile ###

  - platform: template
    name: "${dev} LP Import Inc"
    id: lpid9
    accuracy_decimals: 3
    filters:
      - multiply: 0.001
    unit_of_measurement: "kWh/15m"
    state_class: measurement
    icon: mdi:counter

  - platform: template
    name: "${dev} LP Export Inc"
    id: lpid10
    accuracy_decimals: 3
    filters:
      - multiply: 0.001
    unit_of_measurement: "kWh/15m"
    state_class: measurement
    icon: mdi:counter


#######

  - platform: template
    name: "${dev} EMI Code"
    icon: mdi:chip
    accuracy_decimals: 0
    id: emi_code
    entity_category: diagnostic

  - platform: modbus_controller
    name: "${dev} EMI Year"
    custom_command: [0x1, 0x4, 0x0, 0x3, 0x0, 0x4]
    register_count: 1
    response_size: 25
    lambda: |-
      char hFw1[12];
      char hFw2[12];
      char hFw3[12];
      char _emi[20];

      uint32_t hMnfC = (data[0] << 24 | data[1] << 16 | data[2] << 8 | data[3]);
      uint16_t hMnfY = (data[4] << 8 | data[5]);

      sprintf(hFw1, "%c%c%c%c%c",
              data[6],
              data[7],
              data[8],
              data[9],
              data[10]);

      sprintf(hFw2, "%c%c%c%c%c",
              data[11],
              data[12],
              data[13],
              data[14],
              data[15]);

      sprintf(hFw3, "%c%c%c%c%c",
              data[16],
              data[17],
              data[18],
              data[19],
              data[20]);

      id(emi_fw1).publish_state(hFw1);
      id(emi_fw2).publish_state(hFw2);
      id(emi_fw3).publish_state(hFw3);
      id(emi_code).publish_state(hMnfC);

      switch (hMnfC) {
        case 6623491:
          sprintf(_emi, "%s", "T Janz GPRS");
          break;
        case 6750210:
          sprintf(_emi, "%s", "M Landis+Gyr S3");
          break;
        case 6754306:
          sprintf(_emi, "%s", "T Landis+Gyr S3");
          break;
        case 6754307:
          sprintf(_emi, "%s", "T Landis+Gyr S5");
          break;
        case 11010050:
          sprintf(_emi, "%s", "M Sagem CX1000-6");
          break;
        case 11010051:
          sprintf(_emi, "%s", "M Sagem S212");
          break;
        case 11014146:
          sprintf(_emi, "%s", "T Sagem CX2000-9");
          break;
        case 16973825:
          sprintf(_emi, "%s", "? Ziv ???");
          break;
        case 16977920:
          sprintf(_emi, "%s", "T Ziv 5CTD-E2F");
          break;
        case 18481154:
          sprintf(_emi, "%s", "M Kaifa MA109P");
          break;
        case 18481156:
          sprintf(_emi, "%s", "M Kaifa MA109H");
          break;
        default:
          sprintf(_emi, "%s", "? ??? ???");
      }

      id(emi_name).publish_state(_emi);

      return hMnfY;

      // eof
    ## lambda eof
    accuracy_decimals: 0
    icon: mdi:calendar
    entity_category: diagnostic


### ### ###

globals:

   - id: idx3
     type: int
     restore_value: no
     initial_value: '0' 

   - id: idx4
     type: int
     restore_value: no
     initial_value: '0'

   - id: idx6
     type: int
     restore_value: no
     initial_value: '0'

### ### ###

text_sensor:

  - platform: version
    name: "${dev} ESPHome Version"
    hide_timestamp: true
    entity_category: diagnostic

  - platform: template
    name: "${dev} ESP Clock"
    icon: mdi:clock
    lambda: |-
      char str[25];
      time_t currTime = id(esptime).now().timestamp;
      strftime(str, sizeof(str), "%H:%M:%S", localtime(&currTime));
      return {str};
    update_interval: never
    id: esp_clock

###

  - platform: modbus_controller
    name: "${dev} Clock"
    register_type: read
    address: 0x0001
    register_count: 1
    response_size: 12
    raw_encode: HEXBYTES
    icon: mdi:clock
    lambda: |-
        uint8_t hh, mm, ss;
        hh = data[5];
        mm = data[6];
        ss = data[7];
        char ebclk[20];
        sprintf(ebclk,"%02d:%02d:%02d",hh,mm,ss);
        return {ebclk};
    on_value:
      - then:
        - switch.turn_on: led_pin
        - delay: 30ms
        - switch.turn_off: led_pin

###

  - platform: modbus_controller
    name: "${dev} LP Date Time"
    custom_command: [0x1, 0x44, 0x0, 0x1]
    register_count: 1
    response_size: 42
    lambda: |-
      uint8_t _emi_err1 = data[0];
      uint8_t _emi_err2 = data[1];
      uint16_t lpYY = (data[2] << 8 | data[3]);
      uint8_t lpMT = data[4];
      uint8_t lpDD = data[5];
      uint8_t lpHH = data[7];
      uint8_t lpMM = data[8];
      uint32_t lp3g = (data[15] << 24 | data[16] << 16 | data[17] << 8 | data[18]);
      uint32_t lp4g = (data[19] << 24 | data[20] << 16 | data[21] << 8 | data[22]);
      uint32_t lp6g = (data[27] << 24 | data[28] << 16 | data[29] << 8 | data[30]); 
      //
      if (id(idx3) == 9) {
      id(lpid9).publish_state(lp3g);
      }
      //
      if (id(idx4) == 10) {
      id(lpid10).publish_state(lp4g);
      }
      if (id(idx6) == 10) {
      id(lpid10).publish_state(lp6g);
      }
      // 
      char _emi_err[12];
      sprintf(_emi_err,"0x%0X",_emi_err1);
      id(emi_errF).publish_state(_emi_err);
      sprintf(_emi_err,"0x%0X",_emi_err2);
      id(emi_errS).publish_state(_emi_err);
      //
      char lpclk[25];
      sprintf(lpclk,"%04d-%02d-%02dT%02d:%02d",lpYY,lpMT,lpDD,lpHH,lpMM);
      return {lpclk};
    icon: mdi:calendar

###

  - platform: modbus_controller
    name: "${dev} LP IDs"
    custom_command: [0x1, 0x4, 0x0, 0x80, 0x0, 0x1]
    register_count: 1
    response_size: 14
    lambda: |-
      char lpindex[25];
      sprintf(lpindex,"%d,%d,%d,%d,%d,%d",
          data[2],
          data[3],
          data[4],
          data[5],
          data[6],
          data[7]);
      id(idx3) = data[2];
      id(idx4) = data[3];
      id(idx6) = data[5];
      return {lpindex};
      // eof
    icon: mdi:chip
    entity_category: diagnostic

###

  - platform: modbus_controller
    name: "${dev} Tariff"
    register_type: read
    address: 0x000B
    force_new_range: true    #####
    register_count: 1
    response_size: 2
    raw_encode: COMMA
    icon: mdi:counter
    lambda: |-
        auto z = "Null";
        if (x == "1,0") z = "Vazio";
        else if (x == "2,0") z = "Ponta";
        else if (x == "3,0") z = "Cheias";
        return {z};

#######

  - platform: template
    name: "${dev} EMI Name"
    icon: mdi:chip
    id: emi_name
    entity_category: diagnostic

  - platform: template
    name: "${dev} EMI Fw1"
    icon: mdi:chip
    id: emi_fw1
    entity_category: diagnostic

  - platform: template
    name: "${dev} EMI Fw2"
    icon: mdi:chip
    id: emi_fw2
    entity_category: diagnostic

  - platform: template
    name: "${dev} EMI Fw3"
    icon: mdi:chip
    id: emi_fw3
    entity_category: diagnostic

  - platform: template
    name: "${dev} EMI Err F"
    icon: mdi:chip
    id: emi_errF
    entity_category: diagnostic

  - platform: template
    name: "${dev} EMI Err S"
    icon: mdi:chip
    id: emi_errS
    entity_category: diagnostic

#######
# eof #
#######
